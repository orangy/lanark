apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'

kotlin {
    targets {
        if (project.property("lanark.sdl2.enable") == "true") {
            fromPreset(presets.macosX64, 'sdl2macos') {
                compilations.all {
                    buildTypes = [DEBUG]
                    extraOpts '-Xdisable=devirtualization'
                }
                compilations.main {
                    cinterops {
                        sdl {
                            defFile = file("sdl2/interop/sdl2.def")
                        }
                    }
                }
            }

            if (project.property("lanark.sdl2.ios") == "true") {
                fromPreset(presets.iosX64, 'sdl2isim') {
                    compilations.all {
                        buildTypes = [DEBUG]
                        extraOpts '-Xdisable=devirtualization'
                    }
                    compilations.main {
                        cinterops {
                            sdl {
                                defFile = file("sdl2/interop/sdl2.def")
                            }
                        }
                    }
                }
                fromPreset(presets.iosArm64, 'sdl2ios') {
                    compilations.all {
                        buildTypes = [DEBUG]
                        extraOpts '-Xdisable=devirtualization'
                    }
                    compilations.main {
                        cinterops {
                            sdl {
                                defFile = file("sdl2/interop/sdl2.def")
                            }
                        }
                    }
                }
            }
        }

        fromPreset(presets.jvm, 'lwjgl')
        fromPreset(presets.js, 'web')

        configure([lwjgl]) {
            tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
                jvmTarget = '1.8'
            }
            tasks.getByName(compilations.test.compileKotlinTaskName).kotlinOptions {
                jvmTarget = '1.8'
            }
        }

        configure([web]) {
            tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
                sourceMap = true
            }
        }
    }

    sourceSets {
        commonMain {
            kotlin.srcDirs = ["common/src"]
            resources.srcDirs = ["common/resources"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                api group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: coroutines_version
                api group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-io', version: io_version
                api group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-runtime', version: serialization_version
            }
        }
        commonTest {
            kotlin.srcDirs = ["common/test"]
            resources.srcDirs = ["common/testResources"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        
        nativeMain {
            dependencies {
                api group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-native', version: coroutines_version
                api group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-io-native', version: io_version
                api group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-runtime-native', version: serialization_version
            }
        }

        if (project.property("lanark.sdl2.enable") == "true") {
            sdl2macosMain {
                kotlin.srcDirs = ["sdl2/src"]
                resources.srcDirs = ["sdl2/resources"]
                dependsOn nativeMain
            }
            if (project.property("lanark.sdl2.ios") == "true") {
                sdl2iosMain {
                    if (System.getProperty("idea.active") != "true") {
                        kotlin.srcDirs = ["sdl2/src"]
                        resources.srcDirs = ["sdl2/resources"]
                        dependsOn nativeMain
                    } else {
                        dependsOn.clear()
                    }
                }
                sdl2isimMain {
                    if (System.getProperty("idea.active") != "true") {
                        kotlin.srcDirs = ["sdl2/src"]
                        resources.srcDirs = ["sdl2/resources"]
                        dependsOn nativeMain
                    } else {
                        dependsOn.clear()
                    }
                }
            }
        }

        lwjglMain {
            kotlin.srcDirs = ["lwjgl/src"]
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                api group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-io-jvm', version: io_version

                api "org.lwjgl:lwjgl:$lwjglVersion"
                api "org.lwjgl:lwjgl-assimp:$lwjglVersion"
                api "org.lwjgl:lwjgl-glfw:$lwjglVersion"
                api "org.lwjgl:lwjgl-openal:$lwjglVersion"
                api "org.lwjgl:lwjgl-opengl:$lwjglVersion"
                api "org.lwjgl:lwjgl-stb:$lwjglVersion"
                api "org.lwjgl:lwjgl:$lwjglVersion:$lwjglNatives"
                api "org.lwjgl:lwjgl-assimp:$lwjglVersion:$lwjglNatives"
                api "org.lwjgl:lwjgl-glfw:$lwjglVersion:$lwjglNatives"
                api "org.lwjgl:lwjgl-openal:$lwjglVersion:$lwjglNatives"
                api "org.lwjgl:lwjgl-opengl:$lwjglVersion:$lwjglNatives"
                api "org.lwjgl:lwjgl-stb:$lwjglVersion:$lwjglNatives"
            }
        }

        lwjglTest {
            kotlin.srcDirs = ["lwjgl/test"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }

        webMain {
            kotlin.srcDirs = ["web/src"]
            dependencies {
                api group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-js', version: coroutines_version
                api group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-io-js', version: io_version
                api group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-runtime-js', version: serialization_version
            }
        }
        webTest {
            kotlin.srcDirs = ["web/test"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
    }
}

if (project.property("lanark.sdl2.enable") == "true") {
    afterEvaluate {
        kotlin.targets.sdl2macos.compilations.test.getLinkTask("EXECUTABLE", "DEBUG").doLast { task ->
            copy {
                from file('testResources')
                into task.outputFile.get().parent
            }
        }
    }
}