group = 'org.lanark'
version = '1.0'

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://teamcity.jetbrains.com/guestAuth/repository/download/Kotlin_dev_CompilerAllPlugins/1750279:id/maven' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

// Load unversioned `local.properties` file
def localProperties = new Properties()
localProperties.load(new FileInputStream("$project.rootDir/local.properties"))
localProperties.each { prop -> project.ext.set(prop.key, prop.value) }

apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url 'https://dl.bintray.com/kotlin/kotlinx' }
        maven { url 'https://teamcity.jetbrains.com/guestAuth/repository/download/Kotlin_dev_CompilerAllPlugins/1750279:id/maven' }
    }

    afterEvaluate {
        kotlin.sourceSets.all {
            it.languageSettings.useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes')
        }
        kotlin.targets.matching { it.platformType.name == 'native' }.all {
            compilations.all {
                cinterops.all {
                    configurations[dependencyConfigurationName].attributes.attribute(
                            Usage.USAGE_ATTRIBUTE,
                            objects.named(Usage, 'kotlin-api')
                    )
                }
            }
        }
    }
}
