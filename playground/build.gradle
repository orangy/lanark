apply plugin: 'kotlin-multiplatform'

kotlin {
    infra {
        target('macosX64') {
            compilations.all {
                linkerOpts += ["-macosx_version_min 10.13"]
            }
            binaries {
                executable()
            }
        }
        target('iosX64') {
            compilations.all {
                linkerOpts += ["-ios_simulator_version_min 11.0"]
            }
            compilations.main {
                extraOpts "-nomain"
            }
        }
        target('iosArm64') {
            compilations.all {
                linkerOpts += ["-ios_version_min 11.0"]
            }
            compilations.main {
                extraOpts "-nomain"
            }
        }
        target('linuxX64') {
            compilations.all {
            }
        }
        target('mingwX64') {
            compilations.all {
            }
        }
    }

    jvm {
        compilations.all {
            kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

    js {
        compilations.all {
            kotlinOptions {
                sourceMap = true
                moduleKind = "umd"
                metaInfo = true
            }
        }
    }

    sourceSets.all {
        kotlin.srcDirs = ["$it.name/src"]
        resources.srcDirs = ["$it.name/resources"]
        languageSettings {
            progressiveMode = true
            useExperimentalAnnotation("kotlin.Experimental")
            useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes')
            useExperimentalAnnotation('kotlinx.io.core.ExperimentalIoApi')
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation project(":core")
                implementation project(":ui")
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-reflect'
            }
        }

        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
    }
}

task startSimulator(type: Exec) {
    executable "sh"
    args "-c", 'open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app'
    // TODO: Wait for it to start 
    // xcrun simctl list | grep Booted | wc -l 
}

task shutdownSimulator(type: Exec) {
    executable "sh"
    args "-c", "xcrun simctl shutdown booted"
}

/*
afterEvaluate {
    task webAssembleWeb(type: Sync, dependsOn: compileKotlinWeb) {
        configurations.webCompileClasspath.each { File file ->
            from(zipTree(file.absolutePath), {
                includeEmptyDirs = false
                include { fileTreeElement ->
                    def path = fileTreeElement.path
                    (path.endsWith(".js") || path.endsWith(".js.map")) && (path.startsWith("META-INF/resources/") ||
                            !path.startsWith("META-INF/"))
                }
            })
        }

        from file('web/resources')
        from file('common/resources')

        from(compileKotlinWeb.destinationDir, {
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") || path.endsWith(".js.map")
            }
        })
        into "${project.buildDir}/web"
    }
}

if (project.property("lanark.sdl2.enable") == "true") {
    def RUN_GROUP = 'Run'

    afterEvaluate {
        task bundleResourcesDebugExecutableSdl2macos(type: Copy, dependsOn: [sdl2macosProcessResources]) {
            def target = linkMainDebugExecutableSdl2macos.target
            from sdl2macosProcessResources.destinationDir
            into file("build/bundle/$target/${project.name}.app/Contents/Resources")
        }

        task bundleExecutableDebugExecutableSdl2macos(type: Copy, dependsOn: [linkMainDebugExecutableSdl2macos]) {
            def target = linkMainDebugExecutableSdl2macos.target
            from linkMainDebugExecutableSdl2macos.outputFile.get()
            into file("build/bundle/$target/${project.name}.app/Contents/MacOS")
        }

        task bundleInfoDebugExecutableSdl2macos(type: Copy, dependsOn: [linkMainDebugExecutableSdl2macos]) {
            def target = linkMainDebugExecutableSdl2macos.target
            // add the following to your local.properties file
            // apple_application_id=lanark.playground
            // apple_team_id=<your apple TeamID>
            expand(project.properties)
            from file('macOS/bundle/Info.plist')
            into file("build/bundle/$target/${project.name}.app/Contents")
        }

        task signDebugExecutableSdl2macos(type: Exec, dependsOn: [bundleInfoDebugExecutableSdl2macos, bundleResourcesDebugExecutableSdl2macos, bundleExecutableDebugExecutableSdl2macos]) {
            def target = linkMainDebugExecutableSdl2macos.target
            def appBundle = "build/bundle/$target/${project.name}.app"
            // run "security find-identity -pcodesigning -v" to find your apple.identity and put it into local.properties
            def identity = project.property("macos.identity")
            executable "sh"
            args "-c", "codesign -s $identity --entitlements macOS/bundle/Entitlements.plist $appBundle"
        }

        task runDebugExecutableSdl2macos(type: Exec, group: RUN_GROUP, dependsOn: [bundleInfoDebugExecutableSdl2macos, bundleResourcesDebugExecutableSdl2macos, bundleExecutableDebugExecutableSdl2macos]) {
            def outputFile = linkMainDebugExecutableSdl2macos.outputFile.get()
            workingDir = bundleResourcesDebugExecutableSdl2macos.destinationDir
            executable file("${bundleExecutableDebugExecutableSdl2macos.destinationDir}/${outputFile.name}")
        }

        if (project.property("lanark.sdl2.ios") == "true") {
            task resourcesDebugExecutableSdl2ios(type: Copy, dependsOn: [linkMainDebugExecutableSdl2ios, sdl2iosProcessResources]) {
                def target = linkMainDebugExecutableSdl2ios.target
                from linkMainDebugExecutableSdl2ios.outputFile.get()
                from sdl2iosProcessResources.destinationDir
                into file("build/bundle/$target/${project.name}.app/")
            }

            task resourcesDebugExecutableSdl2isim(type: Copy, dependsOn: [linkMainDebugExecutableSdl2isim, sdl2isimProcessResources]) {
                def target = linkMainDebugExecutableSdl2isim.target
                from linkMainDebugExecutableSdl2isim.outputFile.get()
                from file('build/processedResources/sdl2isim/main')
                into file("build/bundle/$target/${project.name}.app/")
            }

            task bundleDebugExecutableSdl2ios(type: Copy, dependsOn: [resourcesDebugExecutableSdl2ios]) {
                def target = linkMainDebugExecutableSdl2ios.target
                // add the following to your local.properties file
                // apple_application_id=lanark.playground
                // apple_team_id=<your apple TeamID>
                expand(project.properties)
                from file('ios/bundle')
                into file("build/bundle/$target/${project.name}.app/")
            }

            task bundleDebugExecutableSdl2isim(type: Copy, dependsOn: [resourcesDebugExecutableSdl2isim]) {
                def target = linkMainDebugExecutableSdl2isim.target
                expand(project.properties)
                from file('ios/bundle')
                into file("build/bundle/$target/${project.name}.app/")
            }

            task compilePlistDebugExecutableSdl2ios(type: Exec, dependsOn: [bundleDebugExecutableSdl2ios]) {
                def appId = project.property("apple_application_id")
                doFirst {
                    println "Compiling Info.plist for `$appId`…"
                }
                def appBundle = bundleDebugExecutableSdl2ios.destinationDir
                executable "sh"
                args "-c", "plutil -convert binary1 $appBundle/Info.plist"
            }

            task signDebugExecutableSdl2ios(type: Exec, dependsOn: [bundleDebugExecutableSdl2ios, compilePlistDebugExecutableSdl2ios]) {
                def target = linkMainDebugExecutableSdl2ios.target
                def appBundle = bundleDebugExecutableSdl2ios.destinationDir
                // run "security find-identity -pcodesigning -v" to find your apple.identity and put it into local.properties
                def identity = project.property("ios.identity")
                executable "sh"
                args "-c", "codesign -s $identity --entitlements build/bundle/$target/${project.name}.app/Entitlements.plist $appBundle"
            }

            task installDebugExecutableSdl2isim(type: Exec, dependsOn: [bundleDebugExecutableSdl2isim]) {
                def appId = project.property("apple_application_id")
                doFirst {
                    println "Installing `$appId` on a simulator…"
                }
                executable "sh"

                def appBundle = bundleDebugExecutableSdl2isim.destinationDir
                args "-c", "xcrun simctl install booted '${appBundle.absolutePath}'"

                doLast {
                    exec {
                        executable "sh"
                        args "-c", 'echo "Installed to" $(xcrun simctl get_app_container booted ' + appId + ' bundle)'
                    }
                }

                // Local folder where app is installed 
                // open `xcrun simctl get_app_container booted BUNDLEID_OF_YOUR_APP data` -a Finder
            }

            task runDebugExecutableSdl2isim(type: Exec, group: RUN_GROUP, dependsOn: [installDebugExecutableSdl2isim, startSimulator]) {
                def appId = project.property("apple_application_id")
                doFirst {
                    println "Starting `$appId` on a simulator…"
                }

                executable "sh"
                args "-c", "xcrun simctl launch --console-pty booted $appId"
            }

            task runDebugExecutableSdl2ios(type: Exec, group: RUN_GROUP, dependsOn: [signDebugExecutableSdl2ios]) {
                def deviceId = project.property("ios.device.id")
                def appId = project.property("apple_application_id")
                def appBundle = bundleDebugExecutableSdl2ios.destinationDir
                doFirst {
                    println "Starting `$appId` on a device…"
                }

                executable "sh"
                args "-c", "ios-deploy --id $deviceId --justlaunch --debug --bundle $appBundle"
            }
        }
    }
}*/
