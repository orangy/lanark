apply plugin: 'kotlin-multiplatform'

kotlin {
    targets {
        if (project.property("lanark.sdl2.enable") == "true") {
            fromPreset(presets.macosX64, 'sdl2macos') {
                compilations.all {
                    buildTypes = [DEBUG]
                    extraOpts '-Xdisable=devirtualization'
                    linkerOpts += ["-macosx_version_min 10.13"]
                }
                compilations.main {
                    outputKinds = [EXECUTABLE]
                }
            }

            if (project.property("lanark.sdl2.ios") == "true") {
                fromPreset(presets.iosX64, 'sdl2isim') {
                    compilations.all {
                        buildTypes = [DEBUG]
                        extraOpts '-Xdisable=devirtualization'
                        linkerOpts += ["-ios_simulator_version_min 11.0"]
                    }
                    compilations.main {
                        outputKinds = [EXECUTABLE]
                        extraOpts "-nomain"
                    }
                }
                fromPreset(presets.iosArm64, 'sdl2ios') {
                    compilations.all {
                        buildTypes = [DEBUG]
                        extraOpts '-Xdisable=devirtualization'
                        linkerOpts += ["-ios_version_min 11.0"]
                    }
                    compilations.main {
                        outputKinds = [EXECUTABLE]
                        extraOpts "-nomain"
                    }
                }
            }
        }

        fromPreset(presets.jvm, 'lwjgl')
        fromPreset(presets.js, 'web')

        configure([lwjgl]) {
            tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
                jvmTarget = '1.8'
            }
        }
        configure([web]) {
            tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
                sourceMap = true
            }
        }
    }

    sourceSets {
        commonMain {
            kotlin.srcDirs = ["common/src"]
            resources.srcDirs = ["common/resources"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation project(":core")
                implementation project(":ui")
            }
        }
        commonTest {
            kotlin.srcDirs = ["common/test"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        if (project.property("lanark.sdl2.enable") == "true") {
            sdl2macosMain {
                kotlin.srcDirs = ["macOS/src"]
            }
            sdl2isimMain {
                kotlin.srcDirs = ["iOS/src"]
            }

            if (project.property("lanark.sdl2.ios") == "true") {
                sdl2iosMain {
                    if (System.getProperty("idea.active") != "true") {
                        kotlin.srcDirs = ["iOS/src"]
                    } else {
                        dependsOn.clear()
                    }
                }
            }
        }

        lwjglMain {
            kotlin.srcDirs = ["lwjgl/src"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-reflect'
            }
        }

        webMain {
            kotlin.srcDirs = ["web/src"]
            resources.srcDirs = ["web/resources"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
    }
}

task startSimulator(type: Exec) {
    executable "sh"
    args "-c", 'open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app'
    // TODO: Wait for it to start 
    // xcrun simctl list | grep Booted | wc -l 
}

task shutdownSimulator(type: Exec) {
    executable "sh"
    args "-c", "xcrun simctl shutdown booted"
}

afterEvaluate {
    task webAssembleWeb(type: Sync, dependsOn: compileKotlinWeb) {
        configurations.webCompileClasspath.each { File file ->
            from(zipTree(file.absolutePath), {
                includeEmptyDirs = false
                include { fileTreeElement ->
                    def path = fileTreeElement.path
                    (path.endsWith(".js") || path.endsWith(".js.map")) && (path.startsWith("META-INF/resources/") ||
                            !path.startsWith("META-INF/"))
                }
            })
        }

        from compileKotlinWeb.destinationDir
        into "${project.buildDir}/web"
    }
}

if (project.property("lanark.sdl2.enable") == "true") {
    def RUN_GROUP = 'Run'

    afterEvaluate {
        task runDebugExecutableSdl2macos(type: Exec, group: RUN_GROUP, dependsOn: [linkDebugExecutableSdl2macos, sdl2macosProcessResources]) {
            workingDir = file('build/processedResources/sdl2macos/main') // TODO: get it from build task
            executable linkDebugExecutableSdl2macos.outputFile.get()
        }

        if (project.property("lanark.sdl2.ios") == "true") {
            task resourcesDebugExecutableSdl2ios(type: Copy, dependsOn: [linkDebugExecutableSdl2ios]) {
                def target = linkDebugExecutableSdl2ios.target
                from linkDebugExecutableSdl2ios.outputFile.get()
                from file('resources')
                into file("build/bundle/$target/${project.name}.app/")
            }

            task resourcesDebugExecutableSdl2isim(type: Copy, dependsOn: [linkDebugExecutableSdl2isim]) {
                def target = linkDebugExecutableSdl2isim.target
                from linkDebugExecutableSdl2isim.outputFile.get()
                from file('resources')
                into file("build/bundle/$target/${project.name}.app/")
            }

            task bundleDebugExecutableSdl2ios(type: Copy, dependsOn: [resourcesDebugExecutableSdl2ios]) {
                def target = linkDebugExecutableSdl2ios.target
                // add the following to your local.properties file
                // apple_application_id=lanark.playground
                // apple_team_id=<your apple TeamID>
                expand(project.properties)
                from file('ios/bundle')
                into file("build/bundle/$target/${project.name}.app/")
            }

            task bundleDebugExecutableSdl2isim(type: Copy, dependsOn: [resourcesDebugExecutableSdl2isim]) {
                def target = linkDebugExecutableSdl2isim.target
                expand(project.properties)
                from file('ios/bundle')
                into file("build/bundle/$target/${project.name}.app/")
            }

            task compilePlistDebugExecutableSdl2ios(type: Exec, dependsOn: [bundleDebugExecutableSdl2ios]) {
                def appId = project.property("apple_application_id")
                doFirst {
                    println "Compiling Info.plist for `$appId`…"
                }
                def appBundle = bundleDebugExecutableSdl2ios.destinationDir
                executable "sh"
                args "-c", "plutil -convert binary1 $appBundle/Info.plist"
            }

            task signDebugExecutableSdl2ios(type: Exec, dependsOn: [bundleDebugExecutableSdl2ios, compilePlistDebugExecutableSdl2ios]) {
                def appBundle = bundleDebugExecutableSdl2ios.destinationDir
                // run "security find-identity -pcodesigning -v" to find your apple.identity and put it into local.properties
                def identity = project.property("apple.identity")
                executable "sh"
                args "-c", "codesign -s $identity --entitlements $appBundle/Entitlements.plist $appBundle"
            }

            task installDebugExecutableSdl2isim(type: Exec, dependsOn: [bundleDebugExecutableSdl2isim]) {
                def appId = project.property("apple_application_id")
                doFirst {
                    println "Installing `$appId` on a simulator…"
                }
                executable "sh"

                def appBundle = bundleDebugExecutableSdl2isim.destinationDir
                args "-c", "xcrun simctl install booted '${appBundle.absolutePath}'"

                doLast {
                    exec {
                        executable "sh"
                        args "-c", 'echo "Installed to" $(xcrun simctl get_app_container booted ' + appId + ' bundle)'
                    }
                }

                // Local folder where app is installed 
                // open `xcrun simctl get_app_container booted BUNDLEID_OF_YOUR_APP data` -a Finder
            }

            task runDebugExecutableSdl2isim(type: Exec, group: RUN_GROUP, dependsOn: [installDebugExecutableSdl2isim, startSimulator]) {
                def appId = project.property("apple_application_id")
                doFirst {
                    println "Starting `$appId` on a simulator…"
                }

                executable "sh"
                args "-c", "xcrun simctl launch --console-pty booted $appId"
            }

            task runDebugExecutableSdl2ios(type: Exec, group: RUN_GROUP, dependsOn: [signDebugExecutableSdl2ios]) {
                def deviceId = project.property("apple.device.id")
                def appId = project.property("apple_application_id")
                def appBundle = bundleDebugExecutableSdl2ios.destinationDir
                doFirst {
                    println "Starting `$appId` on a device…"
                }

                executable "sh"
                args "-c", "ios-deploy --id $deviceId --justlaunch --debug --bundle $appBundle"
            }
        }
    }
}